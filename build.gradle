ext {
    spring_version = '4.1.1.RELEASE'
    jetty_version = '9.3.0.M2'
    jersey_version = '1.19'
    glassfish_version = '2.17'
    jackson_version = '2.5.3'
    guice_version = '4.0'
    logback_version = '1.1.3'
}

ext.libraries = [
        slf4j: 'org.slf4j:slf4j-api:1.7.7',
        logback: [
                "ch.qos.logback:logback-core:$logback_version",
                "ch.qos.logback:logback-classic:$logback_version"
        ],
        junit: [
                'junit:junit:4.11'
        ],
        test: [
                'org.hamcrest:hamcrest-all:1.3'
        ],
        io: 'commons-io:commons-io:2.4',
        guice: "com.google.inject:guice:$guice_version",
        servlet: 'javax.servlet:javax.servlet-api:3.0.1',
        jetty: [
                "org.eclipse.jetty:jetty-webapp:$jetty_version"
        ],
        jettyProxy: "org.eclipse.jetty:jetty-proxy:$jetty_version",
        urlRewrite: 'org.tuckey:urlrewritefilter:4.0.4',
        servlet: 'javax.servlet:javax.servlet-api:3.0.1',
        inject: 'javax.inject:javax.inject:1',
        jettyClient: "org.eclipse.jetty:jetty-client:$jetty_version",
        springCore: [
                "org.springframework:spring-core:$spring_version",
                "org.springframework:spring-context:$spring_version"
        ],
        springMvc: [
                "org.springframework:spring-webmvc:$spring_version"
        ],
        springTest: [
                "org.springframework:spring-test:$spring_version"
        ],
        guava: 'com.google.guava:guava:18.0',
        jackson: [
                "com.fasterxml.jackson.core:jackson-core:$jackson_version",
                "com.fasterxml.jackson.core:jackson-databind:$jackson_version",
                "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
        ],
        jersey: [
                "org.glassfish.jersey.core:jersey-server:$glassfish_version",
                "org.glassfish.jersey.containers:jersey-container-servlet:$glassfish_version",
                "org.glassfish.jersey.media:jersey-media-json-jackson:$glassfish_version"
        ],
        jerseyMultipart: "org.glassfish.jersey.media:jersey-media-multipart:$glassfish_version",
        jerseyGuice: [
                "org.glassfish.hk2:guice-bridge:2.3.0",
                "com.google.inject.extensions:guice-servlet:$guice_version"
        ],
        jerseySpring: [
                "org.springframework:spring-core:$spring_version",
                "org.springframework:spring-context:$spring_version",
                "org.springframework:spring-web:$spring_version"
        ],
        jersey2Client: [
                "org.glassfish.jersey.core:jersey-client:$glassfish_version",
                "org.glassfish.jersey.connectors:jersey-jetty-connector:$glassfish_version"
        ],
        jerseyTest: [
                "com.sun.jersey.contribs:jersey-guice:$jersey_version",
                "com.sun.jersey:jersey-client:$jersey_version",
                "org.glassfish.jersey.containers:jersey-container-grizzly2-http:$glassfish_version"
        ]
]

allprojects {
    apply plugin: 'idea'
    idea {
        module {
            inheritOutputDirs = true
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'groovy'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    group 'service.gateway'
    version '0.0.1-SNAPSHOT'

    println "Building ${project.name} ($version) with Gradle [${project.gradle.gradleVersion}], Java [${System.getProperty('java.version')}]"

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile libraries.test
        testCompile (libraries.junit) {
            exclude group: 'org.hamcrest'
        }
        testCompile ('org.mockito:mockito-core:1.10.8') {
            exclude group: 'org.hamcrest'
        }
        testCompile 'org.codehaus.groovy:groovy-all:2.4.3'
        testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    }

    jar {
        destinationDir = file("${buildDir}/output")
    }

    jar << {
        new File(jar.destinationDir.path, "build-info.txt").withWriter {
            out ->
                out.writeLine("Project Name: ${project.name}")
                out.writeLine("Project Version: ${project.version}")
                out.writeLine("Build Time: " + new Date())
        }
    }

    test {
        reports.html.enabled = false
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    publishing {
        apply plugin: 'maven'

        publications {
            myPublication(MavenPublication) {
                if (project.name.contains('test')) return
                if (components.getNames().contains('web'))
                    from components.web
                else
                    from components.java
            }
        }
        repositories {
            def path = version.contains('SNAPSHOT')? 'snapshots':'releases'
            maven {
                url "file:/${project.parent.projectDir}/artifacts/$path"
            }
        }
    }

    clean {
        delete "file:/${project.parent.projectDir}/artifacts"
    }

    task stage(dependsOn: ['build'])
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}